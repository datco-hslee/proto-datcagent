import { useEffect } from "react";
import { useTutorialStore } from "@/store/tutorialStore";
import { driver } from 'driver.js';
import 'driver.js/dist/driver.css';

export function MenuHighlighter() {
  const { highlightedElements, isActive, currentScenario } = useTutorialStore();

  useEffect(() => {
    // Í∏∞Ï°¥ Ïä§ÌÉÄÏùº ÌÉúÍ∑∏ Ï†úÍ±∞
    const existingStyle = document.getElementById("tutorial-highlighter-styles");
    if (existingStyle) {
      existingStyle.remove();
    }

    // ÏÉàÎ°úÏö¥ Ïä§ÌÉÄÏùº Ï∂îÍ∞Ä - ÏÑ†Î™ÖÌïòÍ≥† Î∞ùÏùÄ ÌïòÏù¥ÎùºÏù¥Ìä∏
    const style = document.createElement("style");
    style.id = "tutorial-highlighter-styles";
    style.textContent = `
        @keyframes tutorialPulse {
          0%, 100% {
            box-shadow: 0 0 25px rgba(59, 130, 246, 0.8), inset 0 0 25px rgba(59, 130, 246, 0.2);
            transform: scale(1);
          }
          50% {
            box-shadow: 0 0 35px rgba(59, 130, 246, 1), inset 0 0 35px rgba(59, 130, 246, 0.3);
            transform: scale(1.02);
          }
        }

        @keyframes tutorialGlow {
          0%, 100% {
            background: linear-gradient(rgba(59, 130, 246, 0.15), rgba(59, 130, 246, 0.15));
          }
          50% {
            background: linear-gradient(rgba(59, 130, 246, 0.25), rgba(59, 130, 246, 0.25));
          }
        }

        .tutorial-highlight {
          position: relative !important;
          z-index: 60000 !important;
          border: 3px solid #3b82f6 !important;
          border-radius: 12px !important;
          box-shadow: 0 0 25px rgba(59, 130, 246, 0.8) !important;
          animation: tutorialPulse 2s infinite, tutorialGlow 2s infinite !important;
          transition: all 0.3s ease !important;
          background: linear-gradient(rgba(59, 130, 246, 0.15), rgba(59, 130, 246, 0.15)) !important;
          cursor: pointer !important;
          /* ÌïòÏù¥ÎùºÏù¥Ìä∏Îêú ÏòÅÏó≠ÏùÑ Î∞ùÍ≤å ÌëúÏãúÌïòÍ≥† Î∏îÎü¨ Ìö®Í≥º Ï†úÍ±∞ */
          filter: brightness(1.3) contrast(1.2) !important;
          opacity: 1 !important;
          backdrop-filter: none !important;
          pointer-events: auto !important;
          /* Î∞∞Í≤Ω Ïò§Î≤ÑÎ†àÏù¥Î≥¥Îã§ ÏúÑÏóê ÌëúÏãú */
          isolation: isolate !important;
        }

        .tutorial-highlight:hover {
          transform: scale(1.03) !important;
          box-shadow: 0 0 35px rgba(59, 130, 246, 1) !important;
          filter: brightness(1.4) contrast(1.3) !important;
        }

        /* ÌïòÏù¥ÎùºÏù¥Ìä∏Îêú ÏöîÏÜåÏùò Î™®Îì† ÏûêÏãù ÏöîÏÜåÎèÑ Î∞ùÍ≤å ÌïòÍ≥† Î∏îÎü¨ Ìö®Í≥º Ï†úÍ±∞ */
        .tutorial-highlight *,
        .tutorial-highlight span,
        .tutorial-highlight div,
        .tutorial-highlight svg {
          opacity: 1 !important;
          filter: brightness(1.2) contrast(1.1) !important;
          color: white !important;
          backdrop-filter: none !important;
          pointer-events: auto !important;
        }

        /* ÌïòÏù¥ÎùºÏù¥Ìä∏Îêú ÏïÑÏù¥ÏΩòÎèÑ Î∞ùÍ≤å */
        .tutorial-highlight svg {
          filter: brightness(1.5) !important;
        }

        /* ÌïòÏù¥ÎùºÏù¥Ìä∏Îêú ÏòÅÏó≠ÏùÄ Î∂ÄÎ™®Ïùò Î∏îÎü¨ Ìö®Í≥º Î¨¥Ïãú */
        .tutorial-highlight {
          isolation: isolate !important;
        }
      `;
    document.head.appendChild(style);

    return () => {
      if (document.getElementById("tutorial-highlighter-styles")) {
        document.getElementById("tutorial-highlighter-styles")?.remove();
      }
    };
  }, []);

  useEffect(() => {
    // Í∏∞Ï°¥ Driver.js Ïù∏Ïä§ÌÑ¥Ïä§ Ï†ïÎ¶¨
    if ((window as any).tutorialDriver) {
      (window as any).tutorialDriver.destroy();
      delete (window as any).tutorialDriver;
    }

    // ÌïòÏù¥ÎùºÏù¥Ìä∏ Ï†ÅÏö©/Ï†úÍ±∞
    const allHighlighted = document.querySelectorAll(".tutorial-highlight");
    allHighlighted.forEach((el) => {
      el.classList.remove("tutorial-highlight");
      // Í∏∞Ï°¥ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï†úÍ±∞
      const clickHandler = (el as any)._tutorialClickHandler;
      if (clickHandler) {
        el.removeEventListener("click", clickHandler);
        delete (el as any)._tutorialClickHandler;
      }
    });

    if (isActive && highlightedElements.length > 0) {
      console.log("MenuHighlighter: Starting to highlight elements:", highlightedElements);
      
      // Driver.js Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ± Î∞è ÏÑ§Ï†ï
      const driverInstance = driver({
        showProgress: true,
        smoothScroll: true,
        animate: true,
        stagePadding: 15,
        overlayColor: 'rgba(0, 0, 0, 0.7)',
        allowClose: true,
        showButtons: ['next', 'previous', 'close'],
        disableActiveInteraction: false,
        popoverClass: 'datco-driver-popover',
        // ÌïòÏù¥ÎùºÏù¥Ìä∏ Ïú†ÏßÄÎ•º ÏúÑÌïú ÏÑ§Ï†ï
        doneBtnText: 'ÏôÑÎ£å',
        nextBtnText: 'Îã§Ïùå',
        prevBtnText: 'Ïù¥Ï†Ñ',
        progressText: '{{current}} / {{total}}'
      });

      // Ï†ÑÏó≠ Î≥ÄÏàòÎ°ú Ï†ÄÏû•
      (window as any).tutorialDriver = driverInstance;

      // ÏòÅÏóÖ Í≥†Í∞ù Ï∂îÍ∞Ä ÏãúÎÇòÎ¶¨Ïò§Ïù∏ Í≤ΩÏö∞ Driver.js Îã®Í≥ÑÎ≥Ñ Í∞ÄÏù¥Îìú Ïã§Ìñâ
      if (currentScenario && currentScenario.response.includes('ÏòÅÏóÖ Í≥†Í∞ù Ï∂îÍ∞Ä')) {
        console.log("Driver.js: Starting customer addition tutorial");
        
        // Î™®Îì† Îã®Í≥ÑÎ•º ÌïòÎÇòÏùò Ïù∏Ïä§ÌÑ¥Ïä§Î°ú ÌÜµÌï©
        const steps = [
          {
            element: '[data-section-id="sales-customer"]',
            popover: {
              title: 'Step 1: ÏòÅÏóÖ & Í≥†Í∞ù ÏÑπÏÖò',
              description: 'ÏôºÏ™Ω ÏÇ¨Ïù¥ÎìúÎ∞îÏóêÏÑú "ÏòÅÏóÖ & Í≥†Í∞ù" ÏÑπÏÖòÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî. Ïù¥ ÏÑπÏÖòÏóêÎäî Í≥†Í∞ù Í¥ÄÎ¶¨ÏôÄ Í¥ÄÎ†®Îêú Î™®Îì† Í∏∞Îä•Ïù¥ ÏûàÏäµÎãàÎã§.',
              side: 'right' as const,
              align: 'start' as const
            }
          },
          {
            element: '[data-menu="customer-management"]',
            popover: {
              title: 'Step 2: Í≥†Í∞ù Í¥ÄÎ¶¨ Î©îÎâ¥',
              description: '"Í≥†Í∞ù Í¥ÄÎ¶¨" Î©îÎâ¥Î•º ÌÅ¥Î¶≠ÌïòÏó¨ Í≥†Í∞ù Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî. Ïó¨Í∏∞ÏÑú Î™®Îì† Í≥†Í∞ù Ï†ïÎ≥¥Î•º Í¥ÄÎ¶¨Ìï† Ïàò ÏûàÏäµÎãàÎã§.',
              side: 'right' as const,
              align: 'start' as const
            }
          }
        ];

        // Í≥†Í∞ù Ï∂îÍ∞Ä Î≤ÑÌäº Ï∞æÍ∏∞ Ìï®Ïàò
        const findAddButton = () => {
          const buttons = document.querySelectorAll('button');
          for (const button of buttons) {
            if (button.textContent?.includes('ÏÉà Í≥†Í∞ù Ï∂îÍ∞Ä') || 
                button.textContent?.includes('Í≥†Í∞ù Ï∂îÍ∞Ä') ||
                button.textContent?.includes('Ï∂îÍ∞Ä')) {
              return button;
            }
          }
          return null;
        };

        // Í≥†Í∞ù Ï∂îÍ∞Ä Î≤ÑÌäºÏù¥ ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏóê ÏûàÎäîÏßÄ ÌôïÏù∏
        const addButton = findAddButton();
        if (addButton) {
          steps.push({
            element: addButton as any,
            popover: {
              title: 'Step 3: ÏÉà Í≥†Í∞ù Ï∂îÍ∞Ä',
              description: 'Ïù¥ Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ ÏÉàÎ°úÏö¥ Í≥†Í∞ùÏùÑ Ï∂îÍ∞ÄÌï† Ïàò ÏûàÏäµÎãàÎã§. Í≥†Í∞ù Ï†ïÎ≥¥Î•º ÏûÖÎ†•ÌïòÍ≥† Ï†ÄÏû•ÌïòÏÑ∏Ïöî.',
              side: 'right' as const,
              align: 'start' as const
            }
          });
        }

        // Îã®Í≥ÑÎ≥Ñ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï≤òÎ¶¨
        driverInstance.setConfig({
          // ÌïòÏù¥ÎùºÏù¥Ìä∏ ÏãúÏûë Ïãú Ïä§ÌÉÄÏùº Ï†úÍ±∞
          onHighlightStarted: (element: any) => {
            if (element) {
              console.log('ÌïòÏù¥ÎùºÏù¥Ìä∏ ÏãúÏûë:', element);
              // ÌïòÏù¥ÎùºÏù¥Ìä∏ Ìö®Í≥º Ï†úÍ±∞ - Ïä§ÌÉÄÏùº Ï†ÅÏö©ÌïòÏßÄ ÏïäÏùå
            }
          },
          
          onNextClick: (_element: any, _step: any, options: any) => {
            const currentStepIndex = options.state.currentStep;
            
            // Step 2ÏóêÏÑú Í≥†Í∞ù Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
            if (currentStepIndex === 1) {
              const customerMenu = document.querySelector('[data-menu="customer-management"]') as HTMLElement;
              if (customerMenu) {
                // ÌïòÏù¥ÎùºÏù¥Ìä∏ Ìö®Í≥º Ï†úÍ±∞
                // Ïä§ÌÉÄÏùº Ï†ÅÏö©ÌïòÏßÄ ÏïäÏùå
                
                // ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ïã§Ìñâ
                customerMenu.click();
                
                // ÌéòÏù¥ÏßÄ Ïù¥Îèô ÌõÑ Step 3 Î≤ÑÌäº Ï∞æÍ∏∞ (ÎîúÎ†àÏù¥ Ï¶ùÍ∞Ä)
                setTimeout(() => {
                  const newAddButton = findAddButton();
                  if (newAddButton && steps.length === 2) {
                    // Step 3 Ï∂îÍ∞Ä
                    steps.push({
                      element: newAddButton as any,
                      popover: {
                        title: 'Step 3: ÏÉà Í≥†Í∞ù Ï∂îÍ∞Ä',
                        description: 'Ïù¥ Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ ÏÉàÎ°úÏö¥ Í≥†Í∞ùÏùÑ Ï∂îÍ∞ÄÌï† Ïàò ÏûàÏäµÎãàÎã§. Í≥†Í∞ù Ï†ïÎ≥¥Î•º ÏûÖÎ†•ÌïòÍ≥† Ï†ÄÏû•ÌïòÏÑ∏Ïöî.',
                        side: 'right' as const,
                        align: 'start' as const
                      }
                    });
                    driverInstance.setSteps(steps);
                  }
                }, 300); // ÎîúÎ†àÏù¥ 300msÎ°ú Ï¶ùÍ∞Ä
              }
            }
            
            driverInstance.moveNext();
          }
        });

        driverInstance.setSteps(steps);
        driverInstance.drive();
      } else {
        // Îã§Î•∏ ÏãúÎÇòÎ¶¨Ïò§Ïùò Í≤ΩÏö∞ Í∏∞Ï°¥ ÌïòÏù¥ÎùºÏù¥Ìä∏ Î∞©Ïãù ÏÇ¨Ïö©
        console.log("MenuHighlighter: Using standard highlight for scenario:", currentScenario?.response.substring(0, 50));
      }

      highlightedElements.forEach((selector) => {
        const attemptHighlight = (retryCount = 0) => {
          try {
            const elements = document.querySelectorAll(selector);
            console.log(`üîç Selector: "${selector}" - Found ${elements.length} elements (attempt ${retryCount + 1})`);

            if (elements.length === 0 && retryCount < 3) {
              // ÏöîÏÜåÎ•º Ï∞æÏßÄ Î™ªÌïú Í≤ΩÏö∞ Ïû¨ÏãúÎèÑ (ÏµúÎåÄ 3Ìöå)
              console.log(`‚è≥ Retrying in 500ms... (${retryCount + 1}/3)`);
              setTimeout(() => attemptHighlight(retryCount + 1), 500);
              return;
            }

            if (elements.length === 0) {
              console.warn(`‚ùå No elements found for selector: "${selector}" after 3 attempts`);
              // Î™®Îì† data-section-id ÏöîÏÜå ÎîîÎ≤ÑÍπÖ
              const allSectionElements = document.querySelectorAll("[data-section-id]");
              console.log(
                "üìã Available data-section-id elements:",
                Array.from(allSectionElements).map((el) => {
                  return {
                    id: el.getAttribute("data-section-id"),
                    dataMenu: el.getAttribute("data-menu"),
                    tagName: el.tagName,
                    textContent: el.textContent?.substring(0, 50),
                  };
                })
              );

              // Î™®Îì† data-menu ÏöîÏÜå ÎîîÎ≤ÑÍπÖ
              const allMenuElements = document.querySelectorAll("[data-menu]");
              console.log(
                "üéØ Available data-menu elements:",
                Array.from(allMenuElements).map((el) => {
                  return {
                    dataMenu: el.getAttribute("data-menu"),
                    tagName: el.tagName,
                    className: el.className,
                    textContent: el.textContent?.substring(0, 30),
                  };
                })
              );
              return;
            }

            // ÏöîÏÜåÎ•º Ï∞æÏùÄ Í≤ΩÏö∞ ÌïòÏù¥ÎùºÏù¥Ìä∏ Ï†ÅÏö©
            elements.forEach((el, index) => {
              console.log(`‚úÖ Highlighting element ${index + 1}:`, {
                tagName: el.tagName,
                className: el.className,
                textContent: el.textContent?.substring(0, 50),
                attributes: {
                  "data-section-id": el.getAttribute("data-section-id"),
                  "data-menu": el.getAttribute("data-menu"),
                },
              });
              el.classList.add("tutorial-highlight");

              // ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Ï∂îÍ∞Ä
              const clickHandler = (e: Event) => {
                console.log("üéØ Tutorial highlight clicked!", {
                  element: el,
                  dataMenu: el.getAttribute("data-menu"),
                  tagName: el.tagName,
                  className: el.className,
                  eventType: e.type,
                  timestamp: new Date().toISOString(),
                });

                console.log("Tutorial highlight clicked, allowing original action to proceed...");

                // data-menu ÏÜçÏÑ±Ïù¥ ÏûàÎäî Î©îÎâ¥ ÏïÑÏù¥ÌÖúÏù∏ Í≤ΩÏö∞ (Ïã§Ï†ú Î©îÎâ¥ ÏïÑÏù¥ÌÖú)
                const dataMenu = el.getAttribute("data-menu");
                if (dataMenu) {
                  console.log(`Menu item clicked: ${dataMenu}`);

                  // ÌïòÏù¥ÎùºÏù¥Ìä∏ ÌÅ¥ÎûòÏä§ Î∞è Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞ (Ï¶âÏãú)
                  el.classList.remove("tutorial-highlight");
                  el.removeEventListener("click", clickHandler);
                  delete (el as any)._tutorialClickHandler;

                  // ÌäúÌÜ†Î¶¨Ïñº Ï¢ÖÎ£å (Ï¶âÏãú)
                  const { deactivateTutorial } = useTutorialStore.getState();
                  deactivateTutorial();

                  // ÏõêÎ≥∏ Ïù¥Î≤§Ìä∏Í∞Ä ÏûêÏó∞Ïä§ÎüΩÍ≤å Ï≤òÎ¶¨ÎêòÎèÑÎ°ù Ìï® (preventDefaultÎÇò stopPropagation Ìò∏Ï∂úÌïòÏßÄ ÏïäÏùå)
                  console.log(`Allowing original click event to proceed for: ${dataMenu}`);
                  // Ïù¥Î≤§Ìä∏Î•º Ï∞®Îã®ÌïòÏßÄ ÏïäÏúºÎØÄÎ°ú React RouterÏùò NavLinkÍ∞Ä Ï†ïÏÉÅÏ†ÅÏúºÎ°ú ÏûëÎèôÌï®
                } else {
                  // ÏÑπÏÖò Ìó§ÎçîÏù∏ Í≤ΩÏö∞Ïùò Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ
                  const sectionId = el.getAttribute("data-section-id");
                  if (sectionId) {
                    const sectionHeader = el.querySelector('div[style*="cursor: pointer"]') as HTMLElement;
                    if (sectionHeader) {
                      console.log(`Triggering section toggle for: ${sectionId}`);
                      const clickEvent = new MouseEvent("click", {
                        bubbles: true,
                        cancelable: true,
                        view: window,
                      });
                      sectionHeader.dispatchEvent(clickEvent);
                    } else {
                      console.warn(`Section header not found for: ${sectionId}`);
                    }
                  }

                  // ÏÑπÏÖò ÌÜ†Í∏ÄÏùò Í≤ΩÏö∞ ÎîúÎ†àÏù¥ ÌõÑ ÌäúÌÜ†Î¶¨Ïñº Ï¢ÖÎ£å
                  setTimeout(() => {
                    const { deactivateTutorial } = useTutorialStore.getState();
                    deactivateTutorial();
                  }, 500);
                }
              };

              el.addEventListener("click", clickHandler);
              (el as any)._tutorialClickHandler = clickHandler;

              // ÏöîÏÜåÎ°ú Î∂ÄÎìúÎüΩÍ≤å Ïä§ÌÅ¨Î°§
              setTimeout(() => {
                el.scrollIntoView({
                  behavior: "smooth",
                  block: "center",
                  inline: "center",
                });
              }, 200);
            });
          } catch (error) {
            console.warn("Invalid selector:", selector, error);
          }
        };

        // Ï≤´ Î≤àÏß∏ ÏãúÎèÑ Ïã§Ìñâ
        attemptHighlight();
      });
    }
  }, [highlightedElements, isActive, currentScenario]);

  return null;
}

